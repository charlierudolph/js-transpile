var expect = require('chai').expect
var fs = require('fs')
var jsTranpile = require('./')
var path = require('path')
var tmp = require('tmp')

var examples = [{
  extension: '.babel.js',
  input: 'var x = (y) => y',
  name: 'babel-core',
  output:
    'var x = function (y) {\n' +
    '  return y;\n' +
    '};',
  setup: function (tmpDirectory) {
    var babelConfigPath = path.join(tmpDirectory, '.babelrc')
    var babelConfigContent = '{"plugins": ["transform-es2015-arrow-functions"]}'
    fs.writeFileSync(babelConfigPath, babelConfigContent)
  }
}, {
  extension: '.coffee',
  input: 'x is y',
  name: 'coffee-script',
  output:
    '(function() {\n' +
    '  x === y;\n\n' +
    '}).call(this);\n'
}, {
  extension: '.ls',
  input: 'x |> y',
  name: 'livescript',
  output:
    '// Generated by LiveScript 1.5.0\n' +
    '(function(){\n' +
    '  y(\n' +
    '  x);\n' +
    '}).call(this);\n'
}]

describe('js-transpile', function () {
  beforeEach(function () {
    this.tmpDirectory = tmp.dirSync({unsafeCleanup: true}).name
  })

  examples.forEach(function (example) {
    describe(example.name, function () {
      beforeEach(function () {
        if (example.setup) {
          var tmpDirectory = tmp.dirSync({unsafeCleanup: true}).name
          var projectNodeModulesPath = path.join(__dirname, 'node_modules')
          var tmpDirectoryNodeModulesPath = path.join(tmpDirectory, 'node_modules')
          fs.symlinkSync(projectNodeModulesPath, tmpDirectoryNodeModulesPath)
          example.setup(tmpDirectory)
          this.tmpFile = path.join(tmpDirectory, 'test_file')
        } else {
          this.tmpFile = './test_file'
        }
      })

      it('valid input', function () {
        var result = jsTranpile[example.extension]({
          fileContents: example.input,
          filePath: this.tmpFile
        })
        expect(result).to.eql(example.output)
      })

      it('invalid input', function () {
        var error
        try {
          jsTranpile[example.extension]({
            fileContents: '{',
            filePath: this.tmpFile
          })
        } catch (e) {
          error = e
        }
        expect(error.stack).to.contain(this.tmpFile)
      })
    })
  })
})
